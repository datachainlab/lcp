syntax = "proto3";
package ibc.lightclients.lcp.v1;

import "gogoproto/gogo.proto";
import "ibc/core/client/v1/client.proto";

option go_package = "github.com/datachainlab/lcp/go/light-clients/lcp/types";
option (gogoproto.goproto_getters_all) = false;

// A message containing information required to update the client.
message UpdateClientMessage {
  // A proxy message generated by the LCP node running on the target platform
  bytes proxy_message = 1;
  // Signatures of the proxy message by the LCP node
  repeated bytes signatures = 2;
}

// A message to verify IAS report and signature for the enclave key registration
message RegisterEnclaveKeyMessage {
  // IAS report
  bytes report = 1;
  // A signature of the IAS report by the IAS signing key
  bytes signature = 2;
  // A certificate of the IAS signing key
  bytes signing_cert = 3;
  // An operator's signature of the EIP-712 message `RegisterEnclaveKey`
  bytes operator_signature = 4;
}

// A message to verify zkDCAP's output and proof for the enclave key registration
message ZKDCAPRegisterEnclaveKeyMessage {
  // A type of zkVM generated the `quote_verification_output` and `proof`
  uint32 zkvm_type = 1;
  // An output of the zkDCAP program that verifies the quote
  bytes quote_verification_output = 2;
  // A proof of the zkVM generated the `quote_verification_output`
  bytes proof = 3;
  // An operator's signature of the EIP-712 message `ZKDCAPRegisterEnclaveKey`
  bytes operator_signature = 4;
}

message UpdateOperatorsMessage {
  // A nonce for this operators update
  uint64 nonce = 1;
  // A list of new operators
  repeated bytes new_operators = 2;
  // A numerator of the threshold of signatures required for new operators
  uint64 new_operators_threshold_numerator = 3;
  // A denominator of the threshold of signatures required for new operators
  uint64 new_operators_threshold_denominator = 4;
  // Signatures of the EIP-712 message `UpdateOperators` by the current operators
  repeated bytes signatures = 5;
}

message ClientState {
  // The MRENCLAVE of the enclave in running on the target platform
  bytes mrenclave = 1;
  // The expiration period (in seconds) of the enclave key from the time of remote attestation.
  //
  // This is used only for IAS.
  uint64 key_expiration = 2;
  // Indicates whether the client is frozen.
  bool frozen = 3;
  // The height of the latest consensus state that the client has tracked
  ibc.core.client.v1.Height latest_height = 4 [(gogoproto.nullable) = false];
  // The set of quote statuses that the client accepts for the target enclave.
  //
  // e.g. IAS: SW_HARDENING_NEEDED, CONFIGURATION_AND_SW_HARDENING_NEEDED
  //      DCAP: SWHardeningNeeded, ConfigurationAndSWHardeningNeeded
  repeated string allowed_quote_statuses = 5;
  // The set of Security Advisory IDs that the client allows.
  //
  // e.g. INTEL-SA-00001, INTEL-SA-00002
  repeated string allowed_advisory_ids = 6;
  // A list of LCP operator addresses associated with this client.
  //
  // Please check LCP operator details: <https://docs.lcp.network/protocol/lcp-client#lcp-operator>
  repeated bytes operators = 7;
  // The current nonce used in operator updates.
  uint64 operators_nonce = 8;
  // The numerator of the signature threshold for operator updates.
  uint64 operators_threshold_numerator = 9;
  // The denominator of the signature threshold for operator updates.
  uint64 operators_threshold_denominator = 10;
  // The current TCB evaluation data number
  //
  // The client only accepts the zkDCAP output generated using collateral with a TCB evaluation data number equal to or greater than this number.
  uint32 current_tcb_evaluation_data_number = 11;
  // The grace period for updating to the latest TCB evaluation data number (in seconds)
  //
  // Note that this grace period is not affected for updates to non-latest numbers.
  uint32 tcb_evaluation_data_number_update_grace_period = 12;
  // The next TCB evaluation data number to be updated
  //
  // If this number is non-zero, `next_tcb_evaluation_data_number` must be greater than `current_tcb_evaluation_data_number`.
  uint32 next_tcb_evaluation_data_number = 13;
  // The update time of the next TCB evaluation data number (in UNIX time seconds)
  uint64 next_tcb_evaluation_data_number_update_time = 14;
  // The verifier information for the zkDCAP
  //
  // The format is as follows:
  // 0: zkVM type
  // 1-N: arbitrary data for each zkVM type
  //
  // The format of the risc0 zkVM is as follows:
  // | 0 |  1 - 31  |  32 - 64  |
  // |---|----------|-----------|
  // | 1 | reserved | image id  |
  repeated bytes zkdcap_verifier_infos = 15;
}

message ConsensusState {
  // An identifier that uniquely indicates the ELC state at a specific height
  //
  // Please check the state ID details: <https://docs.lcp.network/protocol/elc#state-id>
  bytes state_id = 1;
  // The timestamp of the target chain's block corresponding to the consensus height,
  // expressed in UNIX time (seconds).
  uint64 timestamp = 2;
}
