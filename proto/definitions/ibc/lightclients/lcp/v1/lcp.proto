syntax = "proto3";
package ibc.lightclients.lcp.v1;

import "gogoproto/gogo.proto";
import "ibc/core/client/v1/client.proto";

option go_package = "github.com/datachainlab/lcp/go/light-clients/lcp/types";
option (gogoproto.goproto_getters_all) = false;

message UpdateClientMessage {
  // A message generated by the LCP node running on the target platform
  bytes proxy_message = 1;
  // Signatures of the proxy message by the LCP node
  repeated bytes signatures = 2;
}

// A message to verify IAS report and signature for the enclave key registration
message RegisterEnclaveKeyMessage {
  // IAS report
  bytes report = 1;
  // A signature of the IAS report by the IAS signing key
  bytes signature = 2;
  // A certificate of the IAS signing key
  bytes signing_cert = 3;
  // An operator's signature of the EIP-712 message `RegisterEnclaveKey`
  bytes operator_signature = 4;
}

// A message to verify zkDCAP output and proof for the enclave key registration
message ZKDCAPRegisterEnclaveKeyMessage {
  // A type of zkVM generated the `quote_verification_output` and `proof`
  uint32 zkvm_type = 1;
  // An output of the zkDCAP program that verifies the quote
  bytes quote_verification_output = 2;
  // A proof of the zkVM generated the `quote_verification_output`
  bytes proof = 3;
  // An operator's signature of the EIP-712 message `ZKDCAPRegisterEnclaveKey`
  bytes operator_signature = 4;
}

message UpdateOperatorsMessage {
  // A nonce for this operators update
  uint64 nonce = 1;
  // A list of new operators
  repeated bytes new_operators = 2;
  // A numerator of the threshold of signatures required for new operators
  uint64 new_operators_threshold_numerator = 3;
  // A denominator of the threshold of signatures required for new operators
  uint64 new_operators_threshold_denominator = 4;
  // Signatures of the EIP-712 message `UpdateOperators` by the current operators
  repeated bytes signatures = 5;
}

message ClientState {
  // The MRENCLAVE of the enclave in running on the target platform
  bytes mrenclave = 1;
  // An enclave key's expiration period from the remote attestation time in seconds
  //
  // This is only used for the IAS.
  uint64 key_expiration = 2;
  // Whether the client is frozen
  bool frozen = 3;
  // The height of the latest consensus state that the client has tracked
  ibc.core.client.v1.Height latest_height = 4 [(gogoproto.nullable) = false];
  // The quote statuses of the target enclave that the client allows
  //
  // e.g. IAS: SW_HARDENING_NEEDED, CONFIGURATION_AND_SW_HARDENING_NEEDED
  //      DCAP: SWHardeningNeeded, ConfigurationAndSWHardeningNeeded
  repeated string allowed_quote_statuses = 5;
  // Security Advisory IDs that the client allows
  //
  // e.g. INTEL-SA-00001, INTEL-SA-00002
  repeated string allowed_advisory_ids = 6;
  // A list of addresses of LCP Operators corresponding to this client.
  //
  // Please check LCP operator details: <https://docs.lcp.network/protocol/lcp-client#lcp-operator>
  repeated bytes operators = 7;
  // A current nonce for the operators update
  uint64 operators_nonce = 8;
  // The numerator of the threshold of the signature number for the operators update
  uint64 operators_threshold_numerator = 9;
  // The denominator of the threshold of the signature number for the operators update
  uint64 operators_threshold_denominator = 10;
  // The latest TCB evaluation data number
  //
  // The client updates the number when receiving TCB evaluation data whose number is greater than the current number.
  uint32 latest_tcb_evalulation_data_number = 11;
  // Whether to allow the previous TCB evaluation data number
  //
  // If this is true, the client will accept the previous TCB evaluation data number (i.e., `latest_tcb_evalulation_data_number` - 1).
  // Otherwise, the client will only accept the latest TCB evaluation data number or greater.
  bool allow_previous_tcb_evalulation_data_number = 12;
  // The zkVM verifier information for the zkDCAP
  //
  // The format is as follows:
  // 0: zkVM type
  // 1-N: arbitrary data for each zkVM type
  //
  // zkVM type:
  // 0: unspecified
  // 1: risc0
  repeated bytes zkdcap_verifier_infos = 14;
}

message ConsensusState {
  // An identifier that uniquely indicates the state of the ELC corresponding to a certain height.
  //
  // Please check the state ID details: <https://docs.lcp.network/protocol/elc#state-id>
  bytes state_id = 1;
  // A timestamp of the target chain's block corresponding to the consensus height
  //
  // unix timestamp in seconds
  uint64 timestamp = 2;
}
