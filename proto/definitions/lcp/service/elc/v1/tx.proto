syntax = "proto3";
package lcp.service.elc.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "ibc/core/client/v1/client.proto";

option go_package = "github.com/datachainlab/lcp/go/relay/elc";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the ELC Msg service.
service Msg {
  // CreateClient defines a rpc handler method for MsgCreateClient.
  rpc CreateClient(MsgCreateClient) returns (MsgCreateClientResponse);

  // UpdateClient defines a rpc handler method for MsgUpdateClient.
  rpc UpdateClient(MsgUpdateClient) returns (MsgUpdateClientResponse);

  // UpdateClientStream defines a rpc handler method for MsgUpdateClient.
  rpc UpdateClientStream(stream MsgUpdateClientStreamChunk) returns (MsgUpdateClientResponse);

  // AggregateMessages defines a rpc handler method for MsgAggregateMessages
  rpc AggregateMessages(MsgAggregateMessages) returns (MsgAggregateMessagesResponse);

  // VerifyMembership defines a rpc handler method for MsgVerifyMembership
  rpc VerifyMembership(MsgVerifyMembership) returns (MsgVerifyMembershipResponse);

  // VerifyNonMembership defines a rpc handler method for MsgVerifyNonMembership
  rpc VerifyNonMembership(MsgVerifyNonMembership) returns (MsgVerifyNonMembershipResponse);
}

// MsgCreateClient defines a message to create an IBC client
message MsgCreateClient {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string client_id = 1 [(gogoproto.moretags) = "yaml:\"client_id\""];
  // light client state
  google.protobuf.Any client_state = 2 [(gogoproto.moretags) = "yaml:\"client_state\""];
  // consensus state associated with the client that corresponds to a given
  // height.
  google.protobuf.Any consensus_state = 3 [(gogoproto.moretags) = "yaml:\"consensus_state\""];
  // enclave key for signing
  bytes signer = 4;
}

// MsgCreateClientResponse defines the Msg/CreateClient response type.
message MsgCreateClientResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;
 
  bytes message = 1;
  bytes signature = 2;
}

// MsgUpdateClient defines an sdk.Msg to update a IBC client state using
// the given header.
message MsgUpdateClient {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // client unique identifier
  string client_id = 1 [(gogoproto.moretags) = "yaml:\"client_id\""];
  // header to update the light client
  google.protobuf.Any header = 2;
  // request to emit state
  bool include_state = 3;
  // enclave key for signing
  bytes signer = 4;
}

// MsgUpdateClientResponse defines the Msg/UpdateClient response type.
message MsgUpdateClientResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  bytes message = 1;
  bytes signature = 2;
}

message MsgAggregateMessages {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  bytes signer = 1;
  repeated bytes messages = 2;
  repeated bytes signatures = 3;
}

message MsgAggregateMessagesResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  bytes message = 1;
  bytes signature = 2;
}

message MsgVerifyMembership {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string client_id = 1;
  bytes prefix = 2;
  string path = 3;
  bytes value = 4;
  ibc.core.client.v1.Height proof_height = 5 [(gogoproto.nullable) = false];
  bytes proof = 6;
  // enclave key for signing
  bytes signer = 7;
}

message MsgVerifyMembershipResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  bytes message = 1;
  bytes signature = 2;
}

message MsgVerifyNonMembership {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string client_id = 1;
  bytes prefix = 2;
  string path = 3;
  ibc.core.client.v1.Height proof_height = 4 [(gogoproto.nullable) = false];
  bytes proof = 5;
  // enclave key for signing
  bytes signer = 6;
}

message MsgVerifyNonMembershipResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  bytes message = 1;
  bytes signature = 2;
}

message MsgUpdateClientStreamChunk {
  oneof chunk {
    UpdateClientStreamInit init = 1;
    UpdateClientStreamHeaderChunk header_chunk = 2;
  }
}

message UpdateClientStreamInit {
  string client_id = 1;
  bool include_state = 2;
  bytes signer = 3;
  string type_url = 4;
}

message UpdateClientStreamHeaderChunk {
  bytes data = 1;
}
